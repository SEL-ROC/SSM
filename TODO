-- Allow --add-file to support other file types

    -- hardlink
    -- directory
    -- special

-- Improve diff function

-- ssm -ap or --add-package "pkg pkg pkg pkg"

-- allow host matching 
    - based on hostname match
        - regex
        - glob
    - based on dmidecode element match
        - regex
        - glob
    - match per stanza?
        - all pkgs within a stanza?  or per file?
        - by bundlefile?
            [bundles]
            my_bundle_file match=WHAT,TYPE,PATTERN
                Where
                    WHAT = hostname, dmi-element
                    TYPE = glob, regex
                    PATTERN = 'm/^gpu\d+/'

        - each file item is it's own stanza anyway...

-- change treatment of [services] entries
    - stop converting them to individual files
    - use system specific commands to evaluate and manipulate
        - my $current_settings = get_service_settings($servicename)
        - apply_service_settings($servicename, $target_settings)

-- build regression testing harness

    Directory w/series of config files

        test_configs.d/*.conf
    

    Simple test script maybe?
        
        for config in $(/bin/ls test_configs.d/*.conf)
        do
            ssm --config $config --summary
            ssm --config $config --sync --no
            ssm --config $config --sync --yes
            ssm --config $config --summary
        done


    'make test' executes the test script

-- add an "a" option for "directories".

-- add a "u" option for "unwanted".  Convert a file to an unwanted file.
   Complimentary to "c" for comment out, but actually make it go away on
   the system.

-- when doing an 'a' and updating a file in the repo, if $file has more
   than one instance, make sure we only update the prefered instance.

    search to be sure that $priority($file) matches the entry in the
    config chunk

-- directory+contents-unwanted
    Allow "a" option to add unwanted files to config

--

Make sure that an unwanted file that is in it's desired state (not
there) is considered as satisfying a dependency.  Example problem:

    Not OK:  File /etc/sysconfig/opensm -> Unmet Dependencies:
             /etc/opensm/opensm.conf 
    OK:      Unwanted /etc/opensm/opensm.conf doesn't exist

--

Add a --not-ok option like "GSS"
    Recommended by Francis Dang <francis@tamu.edu>

    Only shows things that are "not ok".

    "Everything is OK -- no need to panic."

    --

    Sounds good, but lower priority.  Current --summary output is pretty
    easy to parse with the eyes or with a parser.

- consider:
    - changing /etc/ssm to /etc/simple-state-manager
    - have program look for /etc/ssm/client.conf if /etc/simple-state-manager/client.conf doesn't exist

- add "--export TARGET_DIRECTORY_FOR_EXPORTED_REPO"

    --export will create a distributable copy of your SSM repository
    that _only_ includes the bits and pieces actually used by the
    config_file you specify.

    Export the identified configuration to the target repo directory:
        - may be cumulative by exporting from multiple config files into
          the target directory.
        - exports the main config file and all bundle files it
          references, maintaining their relative location in the repo
          (if they're in directories).
        - exports each file defined by the config, but _only_ the
          currently referenced version.
        - has the net effect of producing a trimmed repo that is ready
          for distribution to others or point-in-time archival.

- Add nice comments in /etc/ssm/defaults file

- add support for variables

    Declaring:

        [global_variables]
        VAR.varname = value

        [file]
        VAR.varname = value
        VAR.varname2 = $(cmd to achieve var)


    Evaluating:

        #
        # Read in global vars from conf file
        $VARIABLES{global}{VAR1.variable} = "value1";
        $VARIABLES{global}{VAR2.variable} = "value2";
        $VARIABLES{global}{VAR3.variable} = "value3";

        #
        # Read in per-file vars from conf file
        $VARIABLES{/my/file1}{VAR1.variable} = "value1";
        $VARIABLES{/my/file1}{VAR2.variable} = "value2";
        $VARIABLES{/my/file2}{VAR3.variable} = "value3";

        #
        # After reading in conf file, generate global variables regex
        my $regex;
        foreach ( keys %{$VARIABLES{global}} ) {
            $regex .= "$_|";
        }
        $regex =~ s/|$//;
        $regex =~ s/\./[.]/g;
        $main::o{vars_global_regex} = $regex;

        #
        # Then generate per-file regexes
        my $regex;
        foreach ( keys %{$VARIABLES{$file}} ) {
            $regex .= "$_|";
        }
        $regex =~ s/|$//;
        $regex =~ s/\./[.]/g;

        $regex{$FILE} = "$global_regex|$regex";


        # etc...




        #
        # After reading in each file entry, generate per-file regex

        # 
        if m/$REGEX{$file}/


- consider adding a "make version" target:
    - update version number in spec file, dch -i, git tag, etc.

- consider adding an "--files-root DIRECTORY" option.
    
    Implies --only-files.  If the user want's both files and packages,
    they can do a proper --chroot.

-   Have upload_url default to ssh@ or file:// version of
    'config_file'

-   New feature:  action-tag (or maybe call "common-postscript"?)

    Alternate Concept (depends_ok):  
    - Simply have dependency on not just existence, but in an OK state

    Concept:  
     - Ability to assign an "action-tag" to each file in a group of
       associated files.  If one or more of those files is modified
       during an SSM run (installed, chowned, etc.), then that file's
       action-tag is activated.

     - Ability to assign an "action-tag" to packages too.

     - At the end of an SSM run, if an action-tag was activated,
       then the action specified by that action-tag's stanza is
       executed.

    [file]
    name        = /etc/iptables.d/chunks/monkey
    type        = regular
    mode        = 640
    owner       = root
    group       = root
    action-tag  = iptables-restart

    [file]
    name        = /etc/iptables.d/chunks/soup
    type        = regular
    mode        = 640
    owner       = root
    group       = root
    action-tag  = iptables-restart

    [action-tag]
    name        = iptables-restart
    action      = /etc/init.d/iptables restart

- New feature:  test 

    [test]
    name = test FILE1 -nt FILE2
    postscript = blah.sh
    priority = 0

    Ie.:
        [condition]
        name = test /boot/grub/grub.conf -nt /lib/modules/qlogic.update_drivers.buildstamp -o ! -f /lib/modules/qlogic.update_drivers.buildstamp 
        postscript = /usr/local/bin/qlogic.update_drivers && touch /lib/modules/qlogic.update_drivers.timestamp


- Test feature alternate:

    in every file section type, similar to "postscript", add the
    following feature:

        iftrue = condition test

    Only offer to take action if the condition tests true.


- Consider changing --summary:

    - if everything in a bundle is OK, just say OK for the bundle
    - if things in a bundle are not OK, give details by bundle.

    State Definition File: http://10.72.4.2/install/ssm_repo/xcat-master.conf
    OK:     Package manager -> none
    OK:     Bundle:  http://10.72.4.2/install/ssm_repo/xcat-master.conf
    OK:     Bundle:  bundle.common
    OK:     Bundle:  bundle.centos6.3_node
    OK:     Bundle:  bundle.ofed-v2.0
    OK:     Bundle:  bundle.single_10g_eth0
            Not OK:  Bundle:  bundle.single_1g_eth2
            Not OK:  file1
            Not OK:  file2
            OK:  file3
    OK:     Bundle:  bundle.single_ipoib_ib0
    [snip]



- Consider adding this:

    within each [file] section, include the following:

        variables = VAR1=value, VAR2=value, etc

    that are added as local environmental variables that can be used in
    the remainder of that file definition only, and temporarily
    overwrite whatever is already in the environment

-consider adding:

    --only-this-bundle BUNDLE


- global_option
    - diff_program

        e.g.: diff_program = vimdiff

- add option
    --snapshot-init-scripts
    --snapshot-packages

- Add ability to hit "a" to add packages to remove to the master list.

* Add to file definitions:

    options = 'nobackup'

    (Ie.: /etc/modprobe.d/ files)
    (/boot/efi/ stuff -- vfat)

* Use 'u' instead of 'a' ->   for "Upload this file and use it instead
  of the one currently in the repo."

    - Contemplation: not all repos are on a separate machine, and
      therefore are not necessarily an upload.  Would 'u' be confusing
      in that case?  What if we changed it to be the full word "add"?

* global option to allow for auto-resolution of dependencies
    auto_add_deps = yes/no

* when we see this, add option to add package(s) to definition file:

    Additional packages to install:  The packages below are not defined,
    but are dependencies of the packages above, which are defined.  This is
    generally an indication that you need to update your definition file to
    a) include the packages below, or b) remove the packages above.
    Hope that helps! --TheMgmt


*   ssm test for proper serial console config?
    (test module)

*   Consider abstracting target file from file name?
    Ie.: Object -> hosts data
         Object.name{/etc/hosts}
         Object.name{/etc/inet/hosts}

*   add auth capability
    - via certs?
    - Not sure if this is necessary.

*   Fix logging so that screen output ain't so ugly w/pkg installs

*   catch <ctrl>+<c> and clean-up

    In order to make this work, for the sake of cleaning up temporary
    data, we need to establish a temporary folder when SSM first starts
    up, and use that as the root for storing everything else.  Then, on
    $SIG{INT}, we can simply unlink that folder.

    Here's the code to put into place:

        $SIG{INT} = \&clean_up;
        
        sub clean_up {
            print "\n\n";
            print "Caught <CTRL>+<C> (SIGINT).  Cleaning up temp files...\n";
            # unlink $root_dir;
            print "...done.  Exiting.\n";
            exit 7;
        }


*   Fix bug: output from package installs cannot go interactive.  Look
    into alternate perl modules that will allow: a) printing of output,
    and b) interaction with program

*   do we need to keep the re-install code if we're not doing versions
    of packages?

*   For files, ability to say "no backup"?

    Alternate option -- change "bu" to use ".RETIRED" instead of
    "RETIRED".  Or better yet, ".bu_BACKUPS".
    
    For some directories, where contents are processed as includes or
    iterations by another script, having a RETIRED directory and it's
    contents can cause errors or even an operational problem.

    Short hack solution, include the following in a postscript:

        "rm -r /usr/share/initramfs-tools/hooks/RETIRED"

*   apt-get options examples taken from cron-apt package in the
    /etc/cron-apt/config file:

    # General apt options that will be passed to all APTCOMMAND calls.
    # Use "-o quiet" instead of "-q" for aptitude compatibility.
    #  OPTIONS="-o quiet=1"
    # You can for example add an alternative sources.list file here.
    #  OPTIONS="-o quiet=1 -o
    #  Dir::Etc::SourceList=/etc/apt/security.sources.list"
    # If you want to allow unauthenticated and untrusted packages add
    # the
    # following to your options directive.
    #  OPTIONS="-o quiet=1 -o APT::Get::AllowUnauthenticated=true -o aptitude::Cmdline::ignore-trust-violations=yes"

*   Add "yum clean all" to Yum.pm
    * prolly early on

*   Fix Dpkg.pm to handle some packages wanting to go interactive.
    Here's a test: 

        cp /etc/ntp.conf /tmp
        sudo dpkg -P ntp
        sudo cp /tmp/ntp.conf /etc/ntp.conf
        echo "helo" >> /etc/ntp.conf

        Then run "ssm --sync".


*   postinstall for packages

*   dont-ask-just-do-it option
        * when a file changes, don't prompt for input, and assume "yes".

*   Should we remove items that are versioned from the list of packages
    to install?  are they not already in the re-install list if the 
    version doesn't match?


########################################################################
#
#   Someday, Maybe
#

* For an unwanted file, the directory in which the file sits should not
  be a pre-requisite.

- SDE - State Description Engine (the GUI)
  - GUI for describing the state of systems (obviously)
  - Ability to use "generator" plugins
    - Initially create plugins for:
      - SSM
      - Bcfg2

- Add --create-definition
    - creates a definition file based on current client state
    - if definition file exists
        - [packages] sections
            - information will be overwritten
        - [file] sections
            - "name = /file" parameters will be read, and based on the
              state of the name file, all other relevant info will be
              discovered and recorded in the config file.

*   email owner(s) with report
    * add owner field to definition

